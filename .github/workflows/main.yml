name: Grab graduation works

on:
  workflow_dispatch:
    inputs:
      destination_folder:
        description: 'Choose folder'
        required: true
      code_source:
        description: 'Select the source code location'
        required: true
        default: 'release'
        type: choice
        options:
        - release
        - repository
      create_apk:
        description: 'Create APK (if not found in release)'
        required: false
        type: boolean
      check_apk:
        description: 'Check APK (otherwise artifact will not be created)'
        type: boolean
        required: true
      check_presentation:
        description: 'Check presentation (otherwise artifact will not be created)'
        type: boolean
        required: true
      is_upload:
        description: 'Upload to github folder'
        type: boolean
        required: true
    

jobs:
  get-list-works:
    runs-on: ubuntu-latest
    outputs:
      works: ${{ steps.setup_repos.outputs.works }}
    steps:
      - name: Checkout last changes
        uses: actions/checkout@v3.5.2

      - name: Read base information from ${{ github.event.inputs.destination_folder }}/repos.json
        id: setup_repos
        run: |
          JSON=$(cat ./${{ github.event.inputs.destination_folder }}/repos.json)
          JSON="${JSON//'%'/'%25'}"
          JSON="${JSON//$'\n'/''}"
          JSON="${JSON//$'\r'/'%0D'}"
          echo "works=${JSON}" >> "$GITHUB_OUTPUT"
      - name: Checking data
        run: echo "${{ steps.setup_repos.outputs.works }}"
    

  download-release:
    needs: get-list-works
    strategy:
      matrix:
        data: ${{ fromJson(needs.get-list-works.outputs.works) }}
    runs-on: ubuntu-latest
    steps:
      - name: Load latest release from ${{ matrix.data.repo }}
        continue-on-error: true
        uses: robinraju/release-downloader@v1.7
        with:
          repository: ${{ matrix.data.repo }}
          latest: true
          fileName: "*"
          out-file-path: repos/${{ matrix.data.folder }}
          tarBall: false
          zipBall: ${{ github.event.inputs.code_source == 'release' }}

      - name: Check APK
        id: check_apk_on_release
        uses: andstor/file-existence-action@v2
        with:
          files: "repos/${{ matrix.data.folder }}/*.apk"

      - name: Save to artifacts APK
        if: steps.check_apk_on_release.outputs.files_exists == 'true'
        uses: actions/upload-artifact@v3.1.2
        with:
          name: ${{ matrix.data.folder }}-APK
          path: repos/${{ matrix.data.folder }}/*.apk

      - name: Check PPT
        id: check_ppt
        uses: andstor/file-existence-action@v2
        with:
          files: "repos/${{ matrix.data.folder }}/*.ppt"

      - name: Check PPTX
        id: check_pptx
        uses: andstor/file-existence-action@v2
        with:
          files: "repos/${{ matrix.data.folder }}/*.pptx"

      - name: Check PDF
        id: check_pdf
        uses: andstor/file-existence-action@v2
        with:
          files: "repos/${{ matrix.data.folder }}/*.pdf"

      - name: Save to artifacts presentation
        if: >
         steps.check_ppt.outputs.files_exists == 'true' ||
         steps.check_pptx.outputs.files_exists == 'true' ||
         steps.check_pdf.outputs.files_exists == 'true'
        uses: actions/upload-artifact@v3.1.2
        with:
          name: ${{ matrix.data.folder }}-presentation
          path: |
            repos/${{ matrix.data.folder }}/*.ppt
            repos/${{ matrix.data.folder }}/*.pptx
            repos/${{ matrix.data.folder }}/*.pdf

      - name:  Save to artifacts sources
        if: ${{ github.event.inputs.code_source == 'release' }}
        uses: actions/upload-artifact@v3.1.2
        with:
          name: ${{ matrix.data.folder }}-source
          path: |
            repos/${{ matrix.data.folder }}/*.zip

  download-repository:
    if: ${{ github.event.inputs.code_source == 'repository' }}
    needs: get-list-works
    strategy:
      matrix:
        data: ${{ fromJson(needs.get-list-works.outputs.works) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout on ${{ matrix.data.repo }}
        continue-on-error: true
        uses: actions/checkout@v3.5.2
        with:
          repository: ${{ matrix.data.repo }}
          path: repos/${{ matrix.data.folder }}/source
      - name: Compress sources
        continue-on-error: true
        run: |
         cd "repos/${{ matrix.data.folder }}"
         zip -r source.zip /source/*
      - name: Save to artifacts sources
        uses: actions/upload-artifact@v3.1.2
        with:
          name: ${{ matrix.data.folder }}-source
          path: repos/${{ matrix.data.folder }}/*.zip

  publish:
    needs: [download-release, download-repository]
    runs-on: ubuntu-latest
    permissions:
      contents: write 
    steps:
      - name: Checkout last changes
        uses: actions/checkout@v3.5.2

      - name: Remove old releases (if exist)
        run: |
          if [ -d "${{ github.event.inputs.destination_folder }}/Projects" ]; then
            rm -rf ${{ github.event.inputs.destination_folder }}/Projects
          fi
      - name: Download all correct projects
        uses: actions/download-artifact@v3.0.2
        with:
          path: ${{ github.event.inputs.destination_folder }}/Projects

      - name: Upload projects to artifacts
        uses: actions/upload-artifact@v3.1.2
        with:
          name: Projects-${{ github.event.inputs.destination_folder }}
          path: ${{ github.event.inputs.destination_folder }}/Projects/**

      - name: Push new projects
        if: ${{ github.event.inputs.is_upload == 'true' }}
        uses: stefanzweifel/git-auto-commit-action@v4.16.0
        with:
          commit_user_name: git-bot
          commit_user_email: git-bot@noreply.github.com
          commit_message: Update projects info on ${{ github.event.inputs.destination_folder }}
