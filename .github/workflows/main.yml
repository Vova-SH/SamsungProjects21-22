name: Download Release For Repos

on:
  workflow_dispatch:
    inputs:
      destination_folder:
        description: 'Sync folder'
        required: true

jobs:
  get_repos:
    runs-on: ubuntu-latest
    outputs:
      list_repos: ${{ steps.setup_repos.outputs.list_repos }}
    steps:
      - name: Checkout last changes
        uses: actions/checkout@v3

      - name: Get repositories from ${{ github.event.inputs.destination_folder }}/repos.json
        id: setup_repos
        run: |
          JSON=$(cat ./${{ github.event.inputs.destination_folder }}/repos.json)
          JSON="${JSON//'%'/'%25'}"
          JSON="${JSON//$'\n'/'%0A'}"
          JSON="${JSON//$'\r'/'%0D'}"
          echo "::set-output name=list_repos::${JSON}"

      - name: Show data
        run: echo "${{ steps.setup_repos.outputs.list_repos }}"
      - name: Show parse data
        run: echo "${{ fromJson(steps.setup_repos.outputs.list_repos) }}"



  downloaded_repos:
    needs: get_repos
    strategy:
      matrix:
        data: ${{ fromJson(needs.get_repos.outputs.list_repos) }}
    runs-on: ubuntu-latest
    steps:
      - name: Copied last release from ${{ matrix.data.repo }}
        uses: robinraju/release-downloader@v1.3
        with:
          repository: ${{ matrix.data.repo }}
          latest: true
          fileName: "*"
          out-file-path: repos/${{ matrix.data.folder }}
          tarBall: false
          zipBall: true
          
      - name: Check APK
        id: check_apk
        uses: andstor/file-existence-action@v1
        with:
          files: "repos/${{ matrix.data.folder }}/*.apk"
          
      - name: Check PPT
        id: check_ppt
        uses: andstor/file-existence-action@v1
        with:
          files: "repos/${{ matrix.data.folder }}/*.ppt"
          
      - name: Check PPTX
        id: check_pptx
        uses: andstor/file-existence-action@v1
        with:
          files: "repos/${{ matrix.data.folder }}/*.pptx"
          
      - name: Check PDF
        id: check_pdf
        uses: andstor/file-existence-action@v1
        with:
          files: "repos/${{ matrix.data.folder }}/*.pdf"
        
      - name: Save to artifacts
        if: ${{ steps.check_apk.outputs.files_exists == 'true' && ( steps.check_ppt.outputs.files_exists == 'true' || steps.check_pptx.outputs.files_exists == 'true' || steps.check_pdf.outputs.files_exists == 'true' ) }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.data.folder }}
          path: |
            repos/${{ matrix.data.folder }}/*.ppt
            repos/${{ matrix.data.folder }}/*.pptx
            repos/${{ matrix.data.folder }}/*.pdf
            repos/${{ matrix.data.folder }}/*.apk
            repos/${{ matrix.data.folder }}/*.zip



  zip_repos:
    needs: downloaded_repos
    runs-on: ubuntu-latest
    permissions:
      contents: write 
    steps:
      - name: Checkout last changes
        uses: actions/checkout@v3

      - name: Remove old projects
        run: |
          if [ -d "${{ github.event.inputs.destination_folder }}/projects" ]; then
            rmdir ${{ github.event.inputs.destination_folder }}/projects
          fi

      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3
        with:
          path: ${{ github.event.inputs.destination_folder }}/projects

      - name: Structure of downloaded files
        run: ls -R

      - name: Load new data projects
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Update projects info on ${{ github.event.inputs.destination_folder }}

      - name: Upload all projects
        uses: actions/upload-artifact@v3
        with:
          name: All-Projects
          path: ${{ github.event.inputs.destination_folder }}/projects/**
